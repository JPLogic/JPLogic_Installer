--Setup
if fs.exists("OS_data/config") == true then
    ecom = os.getComputerLabel()
    monx,mony = mon.getSize()

--User Input

--Tables
	local stage = {"[      /      /      /       /      /      /      ]","[======/      /      /       /      /      /      ]","[======/======/      /       /      /      /      ]","[======/======/======/       /      /      /      ]","[======/======/======/=======/      /      /      ]","[======/======/======/=======/======/      /      ]","[======/======/======/=======/======/======/      ]","[======/======/======/=======/======/======/======]"
}
--Variables
    local x,y = term.getSize()
      --Monitor Present
    local monv = false
      --Redstone Present
    local rssv = false
	local stageid = 3
--Function
	local function stagebar()
 	 x1,y1 = term.getCursorPos()
 	 term.setCursorPos(1,19)
 	 write(stage[stageid])
 	 term.setCursorPos(x1,y1)
	end
	local function centerText(text)
		local x,y = term.getSize()
		local x1,y1 = term.getCursorPos()
		term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), y1)
		write(text)
	end


--Monitor Config
    mon = peripheral.wrap(emon)
    monx,mony = mon.getSize()

--Redstone Config


--Program
term.clear()
term.setCursorPos(1,1)
centerText("JPLogic Installer")
term.setCursorPos(1,2)
centerText("-----------------")
stagebar()
print("Enter monitor location: ")
    emon = read()
    print("Enter wireless location: ")
    erss = read()


--Peripheral IF
      --Monitor IF
    	if emon = "" then
    		monv = false
   		else
    	 	monv = true
    	end
      --Redstone IF
      	if erss = "" then
      		rssv = false
      	else
      		rssv = true
      	end

--Create Config
      --Open Config
    os.loadAPI("OS_API/settings")
    settings = settings.open("OS_Data/config")
    
      --General Settings
    settings.addSection("Generic")
    
      --Computer Specific
    settings.addSection("Specific")
    
      --RailM = Rail Management
    settings.addSection("RailM")
      
      --RailT = Rail Ticket System
    settings.addSection("RailT")
      
      --Create Generic Config
    settings.setSectionedValue("Generic", "title", "JPLogics OS")
    settings.setSectionedValue("Generic", "bg", "OS_Data/Images/bg")
    settings.setSectionedValue("Generic", "OSver", "OS_Data/CurrentOSVer")
    
    --Create Specific Config
      if monv = "True" then
        settings.setSectionedValue("Specific", "mon", emon)
      else
        settings.setSectionedValie("Specific", "mon", "False")
      end
    settings.setSectionedValue("Specific", "com", ecom)
      if rssv = "True" then
        settings.setSectionedValue("Specific", "rss", erss)
      else
        settings.setSectionedValue("Specific", "rss", "False")
      end
      
      --Save Config
    settings.save("OS_Data/config")
    os.unloadAPI("OS_API/settings")
    print("Config created!")
    sleep(2)
      --Run Install Part 3
    os.shell()
  else
    print("Standby...creating config file...")
    h = fs.open("OS_Data/config","w")
    h.write()
    h.close()
    sleep(2)
    os.shell("installer/initsetup")
end
